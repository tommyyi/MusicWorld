package com.yueyinyue.Model.dao.MusicDl;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_DL_RECORD.
*/
public class MusicDlRecordDao extends AbstractDao<MusicDlRecord, Long> {

    public static final String TABLENAME = "MUSIC_DL_RECORD";

    /**
     * Properties of entity MusicDlRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MusicId = new Property(1, String.class, "musicId", false, "MUSIC_ID");
        public final static Property RingListenUrl = new Property(2, String.class, "ringListenUrl", false, "RING_LISTEN_URL");
        public final static Property PicUrl = new Property(3, String.class, "picUrl", false, "PIC_URL");
        public final static Property SongName = new Property(4, String.class, "songName", false, "SONG_NAME");
        public final static Property Singer = new Property(5, String.class, "singer", false, "SINGER");
        public final static Property AbsoluteDir = new Property(6, String.class, "absoluteDir", false, "ABSOLUTE_DIR");
        public final static Property FullSongFileName = new Property(7, String.class, "fullSongFileName", false, "FULL_SONG_FILE_NAME");
        public final static Property FullSongDlPercentage = new Property(8, int.class, "fullSongDlPercentage", false, "FULL_SONG_DL_PERCENTAGE");
        public final static Property VibrateRingFileName = new Property(9, String.class, "vibrateRingFileName", false, "VIBRATE_RING_FILE_NAME");
        public final static Property VibrateRingDlPercentage = new Property(10, int.class, "vibrateRingDlPercentage", false, "VIBRATE_RING_DL_PERCENTAGE");
    }


    public MusicDlRecordDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDlRecordDao(DaoConfig config, MusicDlRecordDaoSession musicDlRecordDaoSession) {
        super(config, musicDlRecordDaoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_DL_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MUSIC_ID' TEXT NOT NULL ," + // 1: musicId
                "'RING_LISTEN_URL' TEXT NOT NULL ," + // 2: ringListenUrl
                "'PIC_URL' TEXT NOT NULL ," + // 3: picUrl
                "'SONG_NAME' TEXT NOT NULL ," + // 4: songName
                "'SINGER' TEXT NOT NULL ," + // 5: singer
                "'ABSOLUTE_DIR' TEXT NOT NULL ," + // 6: absoluteDir
                "'FULL_SONG_FILE_NAME' TEXT NOT NULL ," + // 7: fullSongFileName
                "'FULL_SONG_DL_PERCENTAGE' INTEGER NOT NULL ," + // 8: fullSongDlPercentage
                "'VIBRATE_RING_FILE_NAME' TEXT NOT NULL ," + // 9: vibrateRingFileName
                "'VIBRATE_RING_DL_PERCENTAGE' INTEGER NOT NULL );"); // 10: vibrateRingDlPercentage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_DL_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicDlRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMusicId());
        stmt.bindString(3, entity.getRingListenUrl());
        stmt.bindString(4, entity.getPicUrl());
        stmt.bindString(5, entity.getSongName());
        stmt.bindString(6, entity.getSinger());
        stmt.bindString(7, entity.getAbsoluteDir());
        stmt.bindString(8, entity.getFullSongFileName());
        stmt.bindLong(9, entity.getFullSongDlPercentage());
        stmt.bindString(10, entity.getVibrateRingFileName());
        stmt.bindLong(11, entity.getVibrateRingDlPercentage());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicDlRecord readEntity(Cursor cursor, int offset) {
        MusicDlRecord entity = new MusicDlRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // musicId
            cursor.getString(offset + 2), // ringListenUrl
            cursor.getString(offset + 3), // picUrl
            cursor.getString(offset + 4), // songName
            cursor.getString(offset + 5), // singer
            cursor.getString(offset + 6), // absoluteDir
            cursor.getString(offset + 7), // fullSongFileName
            cursor.getInt(offset + 8), // fullSongDlPercentage
            cursor.getString(offset + 9), // vibrateRingFileName
            cursor.getInt(offset + 10) // vibrateRingDlPercentage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicDlRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMusicId(cursor.getString(offset + 1));
        entity.setRingListenUrl(cursor.getString(offset + 2));
        entity.setPicUrl(cursor.getString(offset + 3));
        entity.setSongName(cursor.getString(offset + 4));
        entity.setSinger(cursor.getString(offset + 5));
        entity.setAbsoluteDir(cursor.getString(offset + 6));
        entity.setFullSongFileName(cursor.getString(offset + 7));
        entity.setFullSongDlPercentage(cursor.getInt(offset + 8));
        entity.setVibrateRingFileName(cursor.getString(offset + 9));
        entity.setVibrateRingDlPercentage(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicDlRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicDlRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
